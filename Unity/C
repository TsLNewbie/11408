---
title: C# 基础内容(速通）
category: /小书匠/日记/2024-03
grammar_cjkRuby: true
---
参考视频：[新印象 Unity 2020游戏开发基础与实战](https://www.shuyishe.com/bookDetails?id=UB77c7a31cc7468) 其中的视频教学内容。

C# 是微软公司发布的一种由C和C\+\+衍生出来的**面向对象**的编程语言，运行于 .NET Framework 和 .NET Core(完全开源，跨平台) 之上的高级程序设计语言。
C#编程 比 C++ 简单很多 ==(真的吗？) #9E9E9E==

C# 其中很重要的功能就是垃圾回收，可以让应用不使用某些内存的时候，自动释放。

![](./images/1709539958276.png)

# C# 基本格式 ：
C# 代码由一条条语句构成，每个语句都以分号结束 ==（这和C++ ，C 就一样了） #9E9E9E==

C# 编译器不会考虑代码中的回车，空格 或 Tab字符。

C# 是区分大小写的，在编写语句的时候要保证大小写不要出错，否则无法识别。

代码实例：

```C# 
	Console.WriteLine("I love Unity"); Console.WriteLine("Great Unity");
	Console.WriteLine(	"Wo ai Unity");
```

C# 注释有两种， // 和 /* \*/

# 类型与进制
## 进制
进制就是 进位计数制，是人为定义的一种带进位机制的计数方法。

计算机内部使用二进制（为什么用二进制，这在计算机CCCS有提到）

常用进制： 二进制，八进制，十进制，十六进制。


十进制：1x10^n
例子：
520 = 5x10^2 2x10^1 0x10^0

当然其他进制都可以。

二进制 = 1x2^n

八进制 = 1x8^n

十六进制 = 1x16^n

## 计算机单位转换
计算机有以下单位：bit,Byte,KB,MB,GB,TB,PB....
8位二进制最大为 11111111 = 255

1 Byte(字节) = 8 bit(位)

1KB = 1024 Byte

1MB = 1024 KB
....
1PB = 1024 TB
....

## 数据类型:
<a class="xsj_anchor" name="xsj_1709541070261"></a>
![](./images/1709458882487.png)

# 常量与变量
## 常量
**常量**：程序运行期间，不能被改变的量
整型常量：2, 3, 4

浮点型常量：1.2f, 2.3f

字符型常量：'a', 'b', 'A'

字符串常量："123"，"a", "1.2", " "

任何东西都可以是**常量**
```c
const int a = 10; //const常量定义
```
# 变量
**变量**：程序运行期间，可以被改变的量。

本质：变量是一个存储空间，被改变的是存储的内容

注意：变量一定要先定义再使用

举个例子：商店储物柜，图书馆里的书架子。

代码：
```c#
int a;
double b;
float c;
bool d;
```

## 命名规范（程序员的规矩）
1.只能由字母、数字、下划线或@组成，并且不能以数字开头，
	@只能用在开头_hello_.World34
2.不可以与系统关键字同名
3.不能使用重复的变量名(C#大小写敏感)
4.要使用驼峰命名方法int helloWorld hello_world
5.见名知意（规范）

# 数组
## 一维数组
```c#
// 一组年龄
int[] ages;  //和C++好像不同？ C++的话就是 int i[];
// 一组分数 
float[] scores;
// 一组名字
string[] names;
```

## 初始化
在定义数组后，必须对其进行**初始化**才能够使用。

数据类型[] 数组名 = **new** 数据类型\[数组长度\]

```c#
int[] intArray = new int[6]; //数组元素为默认值

//以下两个是一样的意思。
int[] intArray = new int[3]{1,2,3}; 
int[] intArray = new int[]{1,2,3}; //会根据{}的值提供空间

int[] intArray = new[]{1,2,3};

//数据类型[] 数组名 = {元素1, 元素2, ..., 元素n};
int[] myArr = {1,2,3,4,5}; //一般用这个，省事
```

其中 new 很重要！

## 数组元素的访问

元素访问： 数组名\[下标\]

```c#
int[] a = {2,7,4,3,6};

a[0] = 3;
int b = a[0];

```

数组下标：数组元素在数组中的序号。

数组下标**从0开始计数**。

数组长度：a.Length表示数组的长度(这样最大的下标就是 \[a.Length-1\])

## 值类型 引用类型

值类型： int,bool... 枚举、 结构体

引用类型： 字符串，数组
```
int a = 3; int b = a;
int[] a = {2}; int[] b = a;
```
**栈**：自动分配空间、空间连续、速度块。（所有的值类型存储到栈里）
**堆**：程序员申请、空间不连续、速度慢。


![](./images/1709533363912.png)图中，栈中：
值类型：
第一个3 对应 int a = 3; 
第二个3 对应 int b = a; (计算机背地里意思是 把a的值复制，开一个新的栈放入)

引用类型：
第三个Ox435AB343 对应 int[] a = {2}; （其实这个Ox435AB343是地址，引用的是堆中的一个地址，这地址里存放中一个2）
第四个Ox435AB343 对应 int[] b = a; (b的指针指向了a同样指向的一个堆里的地址。)

这里有个讲究，虽然第三和第四个分开了，但指向了同一个地址，其实指向的内容是同一个东西。若这个堆里的东西修改了，这两个内容都会产生变化。

数组 属于 一种引用类型，因此如果将 数组b 赋给 数组a，那么 数组b 在操作数组元素时，实质上操作的还是 数组a。

## 两项 注意：
1. 系统不会检测数组元素的下标是否越界，编程时，必须
保证数组**下标不能越界**。
2. 数组是一个整体，不能直接参加运算(=除外)，只能对单个元素进行处理，通常用到数组的地方都会用到**循环**。

## 二维数组
有两个下标的数组就是二维数组 
```C#
int[ , ] Arr = new int[2, 5] { { 1, 2, 3, 5, 6 }, { 1, 2, 3, 4, 5 } };
//其中，int[2,5] 2为第一维的长度，5为第二维的长度
//把2，5省略了都是可以的。

```

二维数组本质上是以 **数组作为数组元素** 的数组，即"数组的数组"

![](./images/1709534157032.png)

访问：
![](./images/1709534254688.png)

# 运算符 

**赋值运算符：**=
用于给变量幅值，将右边的值赋给左边的变量。

e.g: age =24;

赋值运算符优先级较低（后计算）

**算术运算符：** + - * / % ++ --

e.g: a=a + b -c;

++ 和 --

如果 ++ 在变量的前面 ，先进行+1 ，再参与运算; a = ++5;

如果 ++ 在变量的后面 ，先进行运算 ，再+1; a = 5++;

**复合运算符：**
是对算术运算符的**缩写形式**，使得对变量的改变更为简洁。

e.g：a += b; 等价于 a=a+b;
a = a/b ; a/=b;
a = a%b ; a%=b;

## 输出函数
```C#
System.Console.WriteLine("Hello World！");
```
此方法为 Console 类 的输出方法之一。（C\+\+中类与对象，其中函数调用）
如果程序开始处包含 "using" 指令 ，则可省略 System 类直接调用他们。
>C\+\+中有：using namespace std，
C#是 using system，
Python也有类似指令：from openpyxl import \*


## 输入函数
```C#
int n = Console.Read();

string str = Console.ReadLine();
```

> 番外：
> 在C++中的 return 0; 的作用
> 在C# 中用 Console.ReadKey(); 取代.

# 类型转换
## 隐式转换
描述：是一种安全类型的转换，不会导致数据丢失，因此不需要任何特殊的语法。**由小到大时**，系统**自动**的进行隐式转换。

[C# 基础内容(速通）](xsjapp://doc/5cdab02f-4f05-42fc-a056-7041b54ccd81#xsj_1709541070261)

int a = 5;
byte b = 6;
a = b; ?
b = a; ?